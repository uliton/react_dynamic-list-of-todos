{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["URL","getTodos","a","fetch","response","json","selectedUserId","TodoList","selectUser","useState","todos","setTodos","getTodosFromServer","todosFromServer","useEffect","query","setQuery","completedTodos","setCompletedTodos","filteredTitleTodos","filter","todo","title","includes","className","type","placeholder","value","onChange","event","target","allTodos","completed","filteredCompletedTodos","map","classNames","readOnly","checked","onClick","userId","id","CurrentUser","user","setUser","getUser","then","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f2ec780.chunk.js","sourcesContent":["const URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(selectedUserId: number): Promise<User> {\n  const response = await fetch(`${URL}/users/${selectedUserId}`);\n\n  return response.json();\n}\n","import classNames from 'classnames';\nimport React, { useState, useEffect } from 'react';\nimport { getTodos } from '../../api';\nimport './TodoList.scss';\n\ntype Props = {\n  selectUser: (userId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ selectUser }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const [query, setQuery] = useState('');\n\n  const [completedTodos, setCompletedTodos] = useState('all');\n\n  const filteredTitleTodos = todos.filter(todo => todo.title.includes(query));\n\n  const filteredCompletedTodos = (allTodos: Todo[]) => {\n    switch (completedTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter title\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n        data-cy=\"filterByTitle\"\n      />\n      <select\n        value={completedTodos}\n        onChange={(event) => setCompletedTodos(event.target.value)}\n      >\n        <option\n          value=\"all\"\n        >\n          all\n        </option>\n        <option\n          value=\"active\"\n        >\n          active\n        </option>\n        <option\n          value=\"completed\"\n        >\n          completed\n        </option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredCompletedTodos(filteredTitleTodos).map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              data-cy=\"listOfTodos\"\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n                data-cy=\"userButton\"\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  selectUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = (\n  { selectedUserId, selectUser },\n) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then(setUser);\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3\n            className=\"CurrentUser__name\"\n            data-cy=\"userName\"\n          >\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\"\n            onClick={() => {\n              selectUser(0);\n            }}\n          >\n            Clear\n          </button>\n        </>\n      ) : (\n        'User not found'\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const selectUser = (userId: number): void => {\n    if (selectedUserId !== userId) {\n      setSelectedUserId(userId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}